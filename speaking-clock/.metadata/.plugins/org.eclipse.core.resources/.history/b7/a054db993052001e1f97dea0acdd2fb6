package com.wisdomLeaf.speakingclock;

import static org.junit.Assert.assertEquals;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;

import com.wisdomLeaf.speakingclock.exception.InvalidHourException;
import com.wisdomLeaf.speakingclock.exception.InvalidMinuteException;
import com.wisdomLeaf.speakingclock.exception.TimeConversionException;
import com.wisdomLeaf.speakingclock.repository.TimeConversionRepository;
import com.wisdomLeaf.speakingclock.serviceImplementation.TimeConversionServiceImpl;

@SpringBootTest
class SpeakingClockApplicationTests {

	@Test
	void contextLoads() {
	}
	@InjectMocks
	private TimeConversionServiceImpl timeConversionService;
	@Mock
	private TimeConversionRepository timeConversionRepository;

	@SuppressWarnings("deprecation")
	@BeforeEach
	public void setUp() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	public void testConvertTimeToWords_ValidTime() {
		String hour = testConvertTimeToWords_InvalidHour();
		String mins = testConvertTimeToWords_InvalidMinute();
		String inputTime = hour + ":" + mins;

		String convertedTime = timeConversionService.convertTimeToWords(inputTime);
		
	}

	@Test
	public void testConvertTimeToWords_Midday() {
		String inputTime = "12:00";

		String convertedTime = timeConversionService.convertTimeToWords(inputTime);

		assertEquals("It's Midday", convertedTime);
	}

	@Test
	public void testConvertTimeToWords_Midnight() {
		String inputTime = "00:00";

		String convertedTime = timeConversionService.convertTimeToWords(inputTime);

		assertEquals("It's Midnight", convertedTime);
	}

	@Test
	public String testConvertTimeToWords_InvalidHour() {
		SimpleDateFormat sd = new SimpleDateFormat("HH");
		LocalDateTime now = LocalDateTime.now();
		String inputTime = sd.format(now);

		try {
			 inputTime = timeConversionService.convertTimeToWords(inputTime);
		} catch (InvalidHourException e) {
			assertEquals("Invalid hour value.", e.getMessage());
		}
		return inputTime;
	}

	@Test
	public String testConvertTimeToWords_InvalidMinute() {
		SimpleDateFormat sd = new SimpleDateFormat("mm");
		LocalDateTime now = LocalDateTime.now();
		String inputTime = sd.format(now);

		try {
		inputTime = timeConversionService.convertTimeToWords(inputTime);
		} catch (InvalidMinuteException e) {
			assertEquals("Invalid minute value.", e.getMessage());
		}
		return inputTime;
	}
	//................................................
	 private String convertHoursToWords(int hours) {
	        if (hours >= 0 && hours <= 23) {
	            if (hours == 0) {
	                return "Midnight";
	            } else if (hours == 12) {
	                return "Noon";
	            } else {
	                return convertSingleDigitToWords(hours);
	            }
	        }

	        throw new InvalidHourException("Invalid hour value.");
	    }
	 private String convertMinutesToWords(int minutes) {
	        if (minutes >= 0 && minutes <= 59) {
	            if (minutes == 0) {
	                return "o'clock";
	            } else if (minutes <= 9) {
	                return "oh " + convertSingleDigitToWords(minutes);
	            } else if (minutes >= 10 && minutes <= 19) {
	                return convertTeenToWords(minutes);
	            } else {
	                int tens = minutes / 10;
	                int ones = minutes % 10;
	                return convertTensToWords(tens) + " " + convertSingleDigitToWords(ones);
	            }
	        }

	        throw new InvalidMinuteException("Invalid minute value.");
	    }
	 private String convertSingleDigitToWords(int number) {
	        String[] singleDigits = { "Zero", "One", "Two", "Three", "Four", 
	        		"Five", "Six", "Seven", "Eight", "Nine" };

	        if (number >= 0 && number <= 9) {
	            return singleDigits[number];
	        }

	        throw new TimeConversionException("Invalid single digit value.");
	    }
	 private String convertTeenToWords(int number) {
	        String[] teens = { "", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", 
	        		"Sixteen", "Seventeen",	"Eighteen", "Nineteen" };

	        if (number >= 11 && number <= 19) {
	            return teens[number - 10];
	        }

	        throw new TimeConversionException("Invalid teen value.");
	    }
	 private String convertTensToWords(int number) {
	        String[] tens = { "", "", "Twenty", "Thirty", "Forty", "Fifty" };

	        if (number >= 2 && number <= 5) {
	            return tens[number];
	        }

	        throw new TimeConversionException("Invalid tens value.");
	    }
}
